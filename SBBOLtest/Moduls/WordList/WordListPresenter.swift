//
//  WordListPresenter.swift
//  SBBOLtest
//
//  Created by Erik Vildanov on 30/05/2019.
//  Copyright (c) 2019 Erik Vildanov. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

final class WordListPresenter {

    // MARK: - Private properties -

    private unowned let view: WordListViewInterface
    private let interactor: WordListInteractorInterface
    private let wireframe: WordListWireframeInterface
    private var filter: [History] = []

    // MARK: - Lifecycle -

    init(view: WordListViewInterface, interactor: WordListInteractorInterface, wireframe: WordListWireframeInterface) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
    }
    
    func viewDidLoad() {
        view.setupView()
    }
    
    func viewWillAppear(animated: Bool) {
        view.reloadTableView()
    }
}

// MARK: - Extensions -

extension WordListPresenter: WordListPresenterInterface {
    func numberOrItems() -> Int {
        if view.isFiltering() {
            return filter.count
        }
        return interactor.getAllHistory().count
    }
    
    func item(at indexPath: IndexPath) -> HistoryItem {
        return interactor.getAllHistory()[indexPath.row]
    }
    
    func itemFilter(at indexPath: IndexPath) -> HistoryItem {
        return filter[indexPath.row]
    }
    
    func removeItem(at indexPath: IndexPath) {
        let item = interactor.getAllHistory()[indexPath.row]
        DispatchQueue.global(qos: .default).async {
            CoreDataManager.sharedInstance.deleteItem(word: item)
        }
    }
    
    func setFilter(text: String) {
        filter = interactor.getFilterHistory(searchText: text)
    }
    
}
