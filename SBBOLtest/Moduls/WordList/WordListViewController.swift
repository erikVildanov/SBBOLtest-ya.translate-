//
//  WordListViewController.swift
//  SBBOLtest
//
//  Created by Erik Vildanov on 30/05/2019.
//  Copyright (c) 2019 Erik Vildanov. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

final class WordListViewController: UIViewController {

    // MARK: - Public properties -

    var presenter: WordListPresenterInterface!
    let wordListView = WordListView()

    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()
        self.view = wordListView
        self.title = "History"
        presenter.viewDidLoad()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        presenter.viewWillAppear(animated: animated)
    }
	
}

// MARK: - Extensions -

extension WordListViewController: WordListViewInterface {
    func setupView() {
        wordListView.tableView.register(WordListCell.self, forCellReuseIdentifier: "WordListCell")
        wordListView.tableView.delegate = self
        wordListView.tableView.dataSource = self
        wordListView.searchBar.delegate = self
        let gesture = UITapGestureRecognizer(target: self, action: #selector(closeKEyboard))
        self.view.addGestureRecognizer(gesture)
    }
    
    @objc func closeKEyboard() {
        self.view.endEditing(true)
    }
        
    func reloadTableView() {
        wordListView.tableView.reloadData()
    }
    
    func isFiltering() -> Bool {
        return !wordListView.searchBar.text!.isEmpty
    }
}

extension WordListViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return presenter.numberOrItems()
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "WordListCell", for: indexPath) as! WordListCell
        if isFiltering() {
            cell.configure(item: presenter.itemFilter(at: indexPath))
        } else {
            cell.configure(item: presenter.item(at: indexPath))
        }
        return cell
    }
}

extension WordListViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 50
    }
    
    func tableView(_ tableView: UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: IndexPath) -> UISwipeActionsConfiguration? {
        
        let deleteAction = UIContextualAction(style: .destructive, title: "Delete") {_, _, _ in
            self.presenter.removeItem(at: indexPath)
            tableView.reloadData()
        }
        deleteAction.backgroundColor = UIColor(red: 1, green: 0.23, blue: 0.19, alpha: 1)
        
        let swipeAction = UISwipeActionsConfiguration(actions: [deleteAction])
        swipeAction.performsFirstActionWithFullSwipe = false
        return swipeAction
    }
}

extension WordListViewController: UISearchBarDelegate {
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String)  {
        presenter.setFilter(text: searchText)
        reloadTableView()
    }
}
