//
//  LanguageListPresenter.swift
//  SBBOLtest
//
//  Created by Erik Vildanov on 30/05/2019.
//  Copyright (c) 2019 Erik Vildanov. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

final class LanguageListPresenter {

    // MARK: - Private properties -

    private unowned let view: LanguageListViewInterface
    private let interactor: LanguageListInteractorInterface
    private let wireframe: LanguageListWireframeInterface
    private var supportedLanguages: [SupportedLanguages]?
    private var language: String
    private var isSource: Bool
    // MARK: - Lifecycle -

    init(view: LanguageListViewInterface, interactor: LanguageListInteractorInterface, wireframe: LanguageListWireframeInterface, language: String, isSource: Bool) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
        self.language = language
        self.isSource = isSource
    }
    
    func viewDidLoad() {
        view.setupView()
        view.setTitle()
        loadLanguage()
    }
}

// MARK: - Extensions -

extension LanguageListPresenter: LanguageListPresenterInterface {
    func isSourceLang() -> Bool {
        return isSource
    }
    
    func numberOrItems() -> Int {
        guard supportedLanguages != nil else { return 0 }
        return supportedLanguages!.count
    }
    
    func item(at indexPath: IndexPath) -> LanguageItem {
        let lang = supportedLanguages![indexPath.row]
        return lang
    }
    
    func getCurrentLanguage() -> String {
        return self.language
    }
    
    func setSelectedLanduage(at indexPath: IndexPath) {
        let key = self.supportedLanguages![indexPath.row].key!
        let value = self.supportedLanguages![indexPath.row].name!
        if isSource {
            UserDefaults.standard.setSourceLanduage(value: [key : value])
        } else {
            UserDefaults.standard.setTranslateLanduage(value: [key : value])
        }
        wireframe.navigate(to: .close)
    }
    
    func loadLanguage() {
        interactor.getLanguageList { (supportedLanguages) in
            self.supportedLanguages = supportedLanguages
            DispatchQueue.main.async {
                self.view.reloadTable()
            }
        }
    }
    
}
